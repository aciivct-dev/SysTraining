Set 
in which duplicate values cannot be stored
It is an interface which implements the mathematical set
There are two interfaces which extend the set implementation namely SortedSet and NavigableSet.

 Set<Integer> a = new HashSet<Integer>();
        a.addAll(Arrays.asList(
            new Integer[] { 1, 3, 2, 4, 8, 9, 0 }));
        Set<Integer> b = new HashSet<Integer>();
        b.addAll(Arrays.asList(
            new Integer[] { 1, 3, 7, 5, 4, 0, 7, 5 }));
  
        // To find union
        Set<Integer> union = new HashSet<Integer>(a);
        union.addAll(b);
        System.out.print("Union of the two Set");
        System.out.println(union);
  
        // To find intersection
        Set<Integer> intersection = new HashSet<Integer>(a);
        intersection.retainAll(b);
        System.out.print("Intersection of the two Set");
        System.out.println(intersection);
  
        // To find the symmetric difference
        Set<Integer> difference = new HashSet<Integer>(a);
        difference.removeAll(b);
        System.out.print("Difference of the two Set");
        System.out.println(difference);

HashSet
----------
Java HashSet class is used to create a collection that uses a hash table for storage. 
It inherits the AbstractSet class and implements Set interface

HashSet stores the elements by using a mechanism called hashing.
HashSet contains unique elements only.
HashSet allows null value.
HashSet class is non synchronized.
HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
HashSet is the best approach for search operations.
The initial default capacity of HashSet is 16, and the load factor is 0.75.

Methods
-----------
boolean add(Element  e): It adds the element e to the list.
void clear(): It removes all the elements from the list.
Object clone(): This method returns a shallow copy of the HashSet.
boolean contains(Object o): It checks whether the specified Object o is present in the list or not. If the object has been found it returns true else false.
boolean isEmpty(): Returns true if there is no element present in the Set.
int size(): It gives the number of elements of a Set.
boolean(Object o): It removes the specified Object o from the Set.
-----------------
public class HashSetExample {
   public static void main(String args[]) {
      
      HashSet<String> hset = 
               new HashSet<String>();

       
      hset.add("Apple");
      hset.add("Mango");
      hset.add("Grapes");
      hset.add("Orange");
      hset.add("Fig");
       
      hset.add("Apple");
      hset.add("Mango");
      
      hset.add(null);
      hset.add(null);

      
      System.out.println(hset);
    }
}

Difference between List and Set
----------------------------------
A list can contain duplicate elements whereas Set contains unique elements only.



Tree Set
-------------
TreeSet is similar to HashSet.
it sorts the elements in the ascending order 
while HashSet doesn’t maintain any order. 
TreeSet allows null element but like HashSet it doesn’t allow.

public class TreeSetExample {
     public static void main(String args[]) {
         TreeSet<String> tset = new TreeSet<String>();
         tset.add("ABC");
         tset.add("String");
         tset.add("Test");
         tset.add("Pen");
         tset.add("Ink");
         tset.add("Jack");

          System.out.println(tset);
}
}
LinkedHashSet class
-----------------------
Java LinkedHashSet class is a Hashtable and Linked list implementation of the set interface.

Java LinkedHashSet class contains unique elements only like HashSet.
Java LinkedHashSet class provides all optional set operation and permits null elements.
Java LinkedHashSet class is non synchronized.
Java LinkedHashSet class maintains insertion order.

public class LinkedHashSetExample {
     public static void main(String args[]) {
         
         LinkedHashSet<String> lhset = new LinkedHashSet<String>();

      
         lhset.add("Z");
         lhset.add("ER");
         lhset.add("N");
         lhset.add("O");
         lhset.add("AA");
         lhset.add("FGH");
         System.out.println(lhset);
}
}


