What is JDBC Driver?
-----------------------
JDBC drivers implement the defined interfaces in the JDBC API, for interacting with your database server.

For example, using JDBC drivers enable you to open database connections and to interact with it by sending SQL or database commands then receiving results with Java.

The Java.sql package that ships with JDK, contains various classes with their behaviours defined and their actual implementaions are done in third-party drivers. Third party vendors implements the java.sql.Driver interface in their database driver.


Type 1 − JDBC-ODBC Bridge Driver
Type 2 − JDBC-Native API
Type 3 − JDBC-Net pure Java
Type 4 − 100% Pure Java

Which Driver should be Used?
------------------------------
If you are accessing one type of database, such as Oracle, Sybase, or IBM, the preferred driver type is 4.

If your Java application is accessing multiple types of databases at the same time, type 3 is the preferred driver.

Type 2 drivers are useful in situations, where a type 3 or type 4 driver is not available yet for your database.

The type 1 driver is not considered a deployment-level driver, and is typically used for development and testing purposes only
JDBC - Database Connections

Register JDBC Driver
----------------------
Approach I - Class.forName()

The most common approach to register a driver is to use Java's Class.forName() method, to dynamically load the driver's class file into memory, which automatically registers it. This method is preferable because it allows you to make the driver registration configurable and portable.

Database URL Formulation
-------------------------------
After you've loaded the driver, you can establish a connection using the DriverManager.getConnection() method. For easy reference, let me list the three overloaded DriverManager.getConnection() methods −

getConnection(String url)
getConnection(String url, Properties prop)
getConnection(String url, String user, String password)

RDBMS	JDBC driver name		URL format
MySQL	com.mysql.jdbc.Driver		jdbc:mysql://hostname/ databaseName
	
ORACLE	oracle.jdbc.driver.OracleDriver	jdbc:oracle:thin:@hostname:port Number:databaseName

DB2	COM.ibm.db2.jdbc.net.DB2Driver	jdbc:db2:hostname:port Number/databaseName

Sybase	com.sybase.jdbc.SybDriver	jdbc:sybase:Tds:hostname: port Number/databaseName

JDBC - Statements, PreparedStatement and CallableStatement

Interfaces		Recommended Use
Statement:		Use this for general-purpose access to your database. Useful when you are using static SQL statements at runtime. The Statement interface cannot accept parameters.

PreparedStatement:	Use this when you plan to use the SQL statements many times. The PreparedStatement interface accepts input parameters at runtime.
CallableStatement:	Use this when you want to access the database stored procedures. The CallableStatement interface can also accept runtime input parameters.
